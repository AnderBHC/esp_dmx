// Driver
# esp_err_t uart_driver_install(uart_port_t uart_num, int rx_buffer_size, int tx_buffer_size, int queue_size, QueueHandle_t* uart_queue, int intr_alloc_flags);
# esp_err_t uart_driver_delete(uart_port_t uart_num);
# bool uart_is_driver_installed(uart_port_t uart_num);


// Hardware config
# esp_err_t uart_param_config(uart_port_t uart_num, const uart_config_t *uart_config);
esp_err_t uart_set_baudrate(uart_port_t uart_num, uint32_t baud);
esp_err_t uart_get_baudrate(uart_port_t uart_num, uint32_t* baud);
-> esp_err_t dmx_set_break_num(dmx_port_t dmx_num, uint8_t brk);
-> esp_err_t dmx_get_break_num(dmx_port_t dmx_num, uint8_t *brk);
-> esp_err_t dmx_set_idle_num(dmx_port_t dmx_num, uint16_t mab);
-> esp_err_t dmx_get_idle_num(dmx_port_t dmx_num, uint16_t *mab);
esp_err_t uart_set_pin(uart_port_t uart_num, int tx_io_num, int rx_io_num, int rts_io_num, int cts_io_num);


// Interrupt config
# esp_err_t uart_intr_config(uart_port_t uart_num, const uart_intr_config_t *intr_conf);
esp_err_t uart_set_rx_full_threshold(uart_port_t uart_num, int threshold);
esp_err_t uart_set_tx_empty_threshold(uart_port_t uart_num, int threshold);
esp_err_t uart_set_rx_timeout(uart_port_t uart_num, const uint8_t tout_thresh);
# esp_err_t uart_isr_register(uart_port_t uart_num, void (*fn)(void*), void * arg, int intr_alloc_flags,  uart_isr_handle_t *handle);
esp_err_t uart_isr_free(uart_port_t uart_num);


// Interrupts handling
esp_err_t uart_clear_intr_status(uart_port_t uart_num, uint32_t clr_mask);
esp_err_t uart_enable_intr_mask(uart_port_t uart_num, uint32_t enable_mask);
esp_err_t uart_disable_intr_mask(uart_port_t uart_num, uint32_t disable_mask);
esp_err_t uart_enable_rx_intr(uart_port_t uart_num);
esp_err_t uart_disable_rx_intr(uart_port_t uart_num);
esp_err_t uart_disable_tx_intr(uart_port_t uart_num);
esp_err_t uart_enable_tx_intr(uart_port_t uart_num, int enable, int thresh);


// Read/write
esp_err_t uart_wait_tx_done(uart_port_t uart_num, TickType_t ticks_to_wait);
int uart_write_bytes(uart_port_t uart_num, const char* src, size_t size);
int uart_read_bytes(uart_port_t uart_num, uint8_t* buf, uint32_t length, TickType_t ticks_to_wait);
-> is_healthy(dmx_port_t dmx_num);

esp_err_t uart_get_collision_flag(uart_port_t uart_num, bool* collision_flag);


// Pattern detection
esp_err_t uart_disable_pattern_det_intr(uart_port_t uart_num);
esp_err_t uart_enable_pattern_det_intr(uart_port_t uart_num, char pattern_chr, uint8_t chr_num, int chr_tout, int post_idle, int pre_idle) __attribute__((deprecated));
esp_err_t uart_enable_pattern_det_baud_intr(uart_port_t uart_num, char pattern_chr, uint8_t chr_num, int chr_tout, int post_idle, int pre_idle);
int uart_pattern_pop_pos(uart_port_t uart_num);
int uart_pattern_get_pos(uart_port_t uart_num);
esp_err_t uart_pattern_queue_reset(uart_port_t uart_num, int queue_length);


// Light sleep wakeup
esp_err_t uart_set_wakeup_threshold(uart_port_t uart_num, int wakeup_threshold);
esp_err_t uart_get_wakeup_threshold(uart_port_t uart_num, int* out_wakeup_threshold);
